openapi: "3.0.0"
info:
  title: "33routes API Documentation"
  description: "API для backend-сервисов 33routes."
  version: "1.0.0"
servers:
  - url: http://localhost:8100
  - url: https://33routes.ru
paths:
  /api/route/routes:
    get:
      summary: "Получить список маршрутов"
      description: "Возвращает список идентификаторов маршрутов с поддержкой пагинации."
      parameters:
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
      responses:
        '200':
          description: "Список маршрутов успешно получен"
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'
  /api/route/route/{route-id}:
    get:
      summary: "Получить подробности маршрута"
      description: "Возвращает подробную информацию о маршруте, включая данные пользователя и точки маршрута."
      parameters:
        - $ref: '#/components/parameters/RouteIdParam'
      responses:
        '200':
          description: "Детали маршрута успешно получены"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteDetails'
        '404':
          description: "Маршрут не найден"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: "Обновить маршрут"
      description: "Обновляет информацию о маршруте. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/RouteIdParam'
      requestBody:
        description: "Данные для обновления маршрута (передаются только изменённые поля)"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteRequest'
      responses:
        '200':
          description: "Маршрут успешно обновлён"
        '401':
          description: "Неавторизованный запрос"
        '403':
          description: "Нет прав для обновления маршрута"
        '404':
          description: "Маршрут не найден"
        '500':
          description: "Ошибка сервера"
    delete:
      summary: "Удалить маршрут"
      description: "Выполняет мягкое удаление маршрута (soft delete). Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/RouteIdParam'
      responses:
        '200':
          description: "Маршрут успешно удалён"
        '401':
          description: "Неавторизованный запрос"
        '403':
          description: "Нет прав для удаления маршрута"
        '404':
          description: "Маршрут не найден"
        '500':
          description: "Ошибка сервера"
  /api/route/route:
    post:
      summary: "Создать маршрут"
      description: "Создает новый маршрут с точками и изображениями. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
      requestBody:
        description: "Данные нового маршрута"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
      responses:
        '201':
          description: "Маршрут успешно создан"
        '401':
          description: "Неавторизованный запрос"
        '500':
          description: "Ошибка сервера"
  /api/review/route/{route-id}/reviews:
    get:
      summary: "Получение списка рецензий маршрута"
      description: "Возвращает список рецензий для указанного маршрута с поддержкой пагинации."
      parameters:
        - $ref: '#/components/parameters/RouteIdParam'
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
      responses:
        '200':
          description: "Список рецензий маршрута"
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                example:
                  reviews:
                    - review_id: 1
                      user_id: 123
                      rating: 4.5
                      comment: "Отличный маршрут!"
                      created_at: 1616179200
                      images: ["url_to_image1", "url_to_image2"]
  /api/review/route/{route-id}/review:
    post:
      summary: "Добавление рецензии"
      description: >
        Позволяет пользователю добавить рецензию к маршруту. Требуется аутентификация через cookie session_token.
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/RouteIdParam'
      requestBody:
        description: "Данные рецензии"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: number
                  format: float
                comment:
                  type: string
                images:
                  type: array
                  items:
                    type: string
              example:
                rating: 4.5
                comment: "Amazing route, highly recommended!"
                images: ["url_to_image1", "url_to_image2"]
      responses:
        '200':
          description: "Рецензия успешно добавлена"
    delete:
      summary: "Удаление рецензии"
      description: >
        Позволяет пользователю удалить свою рецензию для маршрута. Требуется аутентификация через cookie session_token.
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/RouteIdParam'
      requestBody:
        description: "Данные для удаления рецензии"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                review_id:
                  type: integer
              example:
                review_id: 1
      responses:
        '200':
          description: "Рецензия успешно удалена"
  /api/comment/review/{review-id}/comments:
    get:
      summary: "Получить комментарии к рецензии"
      description: "Возвращает список комментариев для указанной рецензии с поддержкой пагинации."
      parameters:
        - $ref: '#/components/parameters/ReviewIdParam'
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
      responses:
        '200':
          description: "Список комментариев"
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                example:
                  comments:
                    - comment_id: 1
                      user_id: 123
                      text: "Great route!"
                      created_at: 1616179200
                      images: ["url1", "url2"]
                      reply_to: null
  /api/comment/review/{review-id}/comment:
    post:
      summary: "Добавление комментария"
      description: "Позволяет пользователю добавить комментарий к рецензии. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/ReviewIdParam'
      requestBody:
        description: "Данные комментария"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
            example:
              reply_to: 5
              text: "Отличный обзор!"
              images: ["base64data1", "base64data2"]
      responses:
        '200':
          description: "Комментарий успешно добавлен"
    delete:
      summary: "Удаление комментария"
      description: "Позволяет пользователю удалить комментарий к рецензии. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/ReviewIdParam'
      requestBody:
        description: "Данные для удаления комментария"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommentRequest'
            example:
              comment_id: 1
      responses:
        '200':
          description: "Комментарий успешно удалён"
  /api/collection/collections:
    get:
      summary: "Получение списка подборок"
      description: "Возвращает список идентификаторов подборок с поддержкой пагинации."
      parameters:
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
      responses:
        '200':
          description: "Список подборок успешно получен"
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: integer
                example:
                  results: [1, 2, 3]
  /api/collection/collection/{collection-id}:
    get:
      summary: "Получение информации о подборке"
      description: "Возвращает подробную информацию о выбранной подборке."
      parameters:
        - $ref: '#/components/parameters/CollectionIdParam'
      responses:
        '200':
          description: "Информация о подборке получена"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDetail'
        '404':
          description: "Подборка не найдена"
    put:
      summary: "Обновление подборки"
      description: "Позволяет пользователю обновить существующую подборку. Передаются только изменённые поля. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/CollectionIdParam'
      requestBody:
        description: "Данные для обновления подборки"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCollectionRequest'
      responses:
        '200':
          description: "Подборка успешно обновлена"
    delete:
      summary: "Удаление подборки"
      description: "Позволяет пользователю удалить существующую подборку. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/CollectionIdParam'
      responses:
        '200':
          description: "Подборка успешно удалена"
  /api/collection/collection:
    post:
      summary: "Создание новой подборки"
      description: "Позволяет пользователю создать новую подборку. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
      requestBody:
        description: "Данные для создания новой подборки"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
      responses:
        '201':
          description: "Подборка успешно создана"
        '500':
          description: "Ошибка сервера"
  /api/collection/collection/{collection-id}/add/{route-id}:
    put:
      summary: "Добавление маршрута в подборку"
      description: "Позволяет пользователю добавить маршрут в указанную подборку. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/CollectionIdParam'
        - $ref: '#/components/parameters/RouteIdParam'
        - $ref: '#/components/parameters/SessionTokenCookie'
      responses:
        '200':
          description: "Маршрут успешно добавлен в подборку"
  /api/collection/collection/{collection-id}/remove/{route-id}:
    delete:
      summary: "Удаление маршрута из подборки"
      description: "Позволяет пользователю удалить маршрут из указанной подборки. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/CollectionIdParam'
        - $ref: '#/components/parameters/RouteIdParam'
        - $ref: '#/components/parameters/SessionTokenCookie'
      responses:
        '200':
          description: "Маршрут успешно удален из подборки"
  /api/collection/collection/saved:
    get:
      summary: "Получить список сохраненных маршрутов пользователя"
      description: |
        Возвращает список идентификаторов маршрутов, сохраненных текущим пользователем.
        Требуется аутентификация через cookie session_token.
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
      responses:
        '200':
          description: "Список сохраненных маршрутов успешно получен"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SavedRoutesResponse'
              example:
                routes: [123, 456, 789]
        '401':
          description: "Неавторизованный запрос"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: "Внутренняя ошибка сервера"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/collection/collection/saved/add/{route_id}:
    put:
      summary: "Сохранение маршрута"
      description: "Позволяет пользователю сохранить маршрут в избранное. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/RouteIdParam'
      responses:
        '200':
          description: "Маршрут успешно сохранен"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /api/collection/collection/saved/remove/{route_id}:
    delete:
      summary: "Удаление маршрута из сохраненных"
      description: "Позволяет пользователю удалить маршрут из избранного. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/RouteIdParam'
      responses:
        '200':
          description: "Маршрут успешно удален из сохраненных"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'

  /api/auth/register:
    post:
      summary: "Регистрация пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: "Пользователь успешно зарегистрирован"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '409':
          description: "Пользователь уже существует"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/auth/login:
    post:
      summary: "Авторизация пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: "Пользователь успешно авторизован"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: "Неавторизованный запрос"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/auth/check_token:
    post:
      summary: "Проверка валидности токена сессии"
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                backend_session_token:
                  type: string
                  description: "Backend session token"
      responses:
        '200':
          description: "Токен валиден"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
        '400':
          description: "Отсутствуют или неверны токены"
        '401':
          description: "Токен не прошёл проверку или не найден"
        '500':
          description: "Внутренняя ошибка сервиса"
  /api/like/comment/{comment-id}:
    post:
      summary: "Поставить лайк на комментарий"
      description: "Позволяет пользователю поставить лайк на комментарий. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/CommentIdParam'
      responses:
        '200':
          description: "Лайк успешно поставлен"
        '400':
          description: "Некорректный запрос"
        '401':
          description: "Пользователь не авторизован"
        '500':
          description: "Внутренняя ошибка сервиса"
    delete:
      summary: "Убрать лайк с комментария"
      description: "Позволяет пользователю убрать лайк с комментария. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/CommentIdParam'
      responses:
        '200':
          description: "Лайк успешно убран"
        '400':
          description: "Некорректный запрос"
        '401':
          description: "Пользователь не авторизован"
        '500':
          description: "Внутренняя ошибка сервиса"
  /api/like/review/{review-id}:
    post:
      summary: "Поставить лайк на рецензию"
      description: "Позволяет пользователю поставить лайк на рецензию. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/ReviewIdParam'
      responses:
        '200':
          description: "Лайк успешно поставлен"
        '400':
          description: "Некорректный запрос"
        '401':
          description: "Пользователь не авторизован"
        '500':
          description: "Внутренняя ошибка сервиса"
    delete:
      summary: "Убрать лайк с рецензии"
      description: "Позволяет пользователю убрать лайк с рецензии. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
        - $ref: '#/components/parameters/ReviewIdParam'
      responses:
        '200':
          description: "Лайк успешно убран"
        '400':
          description: "Некорректный запрос"
        '401':
          description: "Пользователь не авторизован"
        '500':
          description: "Внутренняя ошибка сервиса"
  /api/user/{username}:
    get:
      summary: "Получить публичный профиль пользователя"
      description: "Возвращает публичный профиль пользователя по username."
      parameters:
        - $ref: '#/components/parameters/UsernameParam'
      responses:
        '200':
          description: "Публичный профиль успешно получен"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfileResponse'
        '404':
          description: "Пользователь не найден"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/user/{user-id}/brief:
    get:
      summary: "Получить краткую информацию о пользователе"
      description: "Возвращает краткое представление профиля пользователя: user_id, username, name, surname и avatar_url."
      parameters:
        - name: user-id
          in: path
          required: true
          description: "Уникальный идентификатор пользователя"
          schema:
            type: integer
      responses:
        '200':
          description: "Краткая информация о пользователе успешно получена"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBriefResponse'
        '404':
          description: "Пользователь не найден"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/user/delete:
    delete:
      summary: "Удалить профиль пользователя"
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
      responses:
        '200':
          description: "Профиль пользователя успешно удалён"
        '401':
          description: "Не авторизован"
        '404':
          description: "Пользователь не найден"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/user/me:
    get:
      summary: "Получить свой юзернейм"
      description: "Возвращает юзернейм текущего аутентифицированного пользователя. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
      responses:
        '200':
          description: "Юзернейм успешно получен"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeResponse'
        '401':
          description: "Не авторизован"
        '500':
          description: "Ошибка сервера"
  /api/user/settings:
    get:
      summary: "Получить настройки пользователя"
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
      responses:
        '200':
          description: "Настройки пользователя успешно получены"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '401':
          description: "Не авторизован"
        '404':
          description: "Настройки пользователя не найдены"
        '500':
          description: "Внутренняя ошибка сервера"
    put:
      summary: "Обновить настройки пользователя"
      security:
        - sessionCookie: []
      parameters:
        - $ref: '#/components/parameters/SessionTokenCookie'
      requestBody:
        description: "Объект с данными для обновления настроек"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsUpdate'
      responses:
        '200':
          description: "Настройки пользователя успешно обновлены"
        '401':
          description: "Не авторизован"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/search/users:
    get:
      summary: "Поиск пользователей"
      description: >
        Ищет пользователей по частичному совпадению строки поиска с именем, фамилией или username.
        Параметр `q` является опциональным. Пагинация осуществляется посредством параметров запроса,
        а информация о страницах возвращается в заголовках ответа.
      parameters:
        - name: q
          in: query
          description: "Строка поиска для имени, фамилии или username (частичное совпадение)"
          schema:
            type: string
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
        - name: extra
          in: query
          description: "Дополнительные неиспользуемые параметры"
          schema:
            type: string
      responses:
        "200":
          description: "Список найденных пользователей (id) с заголовками пагинации."
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: integer
        "400":
          description: "Некорректные параметры (ошибка десериализации)."
        "500":
          description: "Внутренняя ошибка сервера."
  /api/search/routes:
    get:
      summary: "Поиск маршрутов"
      description: >
        Производит поиск маршрутов с возможностью фильтрации по названию и ряду параметров:
        - **q**: строка для поиска в названии маршрута;
        - **min_length** и **max_length**: минимальная и максимальная длина маршрута (в метрах);
        - **min_duration** и **max_duration**: минимальная и максимальная длительность маршрута (в секундах);
        - **tags**: теги маршрута, перечисленные через запятую (например, `forest,near_water`);
        - **category**: категория маршрута (например, `walking`);
        - **min_rating** и **max_rating**: диапазон рейтинга (0–5).
        Параметр **order** позволяет задать сортировку. Допустимые значения сортировки:  
        **rating_desc**, **rating_asc**, **created_desc**, **created_asc**, **length_desc**, **length_asc**.  
        Если для одного поля заданы противоречивые сортировки, возвращается ошибка 400.
      parameters:
        - name: q
          in: query
          description: "Строка поиска для названия маршрута"
          schema:
            type: string
        - name: min_length
          in: query
          description: "Минимальная длина маршрута в метрах"
          schema:
            type: integer
        - name: max_length
          in: query
          description: "Максимальная длина маршрута в метрах"
          schema:
            type: integer
        - name: min_duration
          in: query
          description: "Минимальная длительность маршрута в секундах"
          schema:
            type: integer
        - name: max_duration
          in: query
          description: "Максимальная длительность маршрута в секундах"
          schema:
            type: integer
        - name: tags
          in: query
          description: "Теги маршрута, разделённые запятой (например, forest,near_water)"
          schema:
            type: string
        - name: category
          in: query
          description: "Категория маршрута (например, walking)"
          schema:
            type: string
        - name: min_rating
          in: query
          description: "Минимальный рейтинг маршрута (число с плавающей точкой, 0–5)"
          schema:
            type: number
            format: float
        - name: max_rating
          in: query
          description: "Максимальный рейтинг маршрута (число с плавающей точкой, 0–5)"
          schema:
            type: number
            format: float
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
        - name: order
          in: query
          description: >
            Параметр сортировки. Может содержать несколько значений, разделённых запятой.  
            Допустимые значения: **rating_desc**, **rating_asc**, **created_desc**, **created_asc**, **length_desc**, **length_asc**.
          schema:
            type: string
      responses:
        "200":
          description: "Список найденных маршрутов (id) с заголовками пагинации."
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: integer
        "400":
          description: "Некорректные параметры (например, ошибка десериализации или конфликт сортировки)."
        "500":
          description: "Внутренняя ошибка сервера."
  /api/search/collections:
    get:
      summary: "Поиск подборок"
      description: >
        Выполняет поиск подборок по названию, рейтингу и тегам.
        Дополнительно поддерживается сортировка и пагинация.
        Параметр **order** может принимать следующие значения: **rating_desc**, **rating_asc**, **created_desc**, **created_asc**.
      parameters:
        - name: q
          in: query
          description: "Строка поиска для названия подборки"
          schema:
            type: string
        - name: min_rating
          in: query
          description: "Минимальный рейтинг подборки (число с плавающей точкой, 0–5)"
          schema:
            type: number
            format: float
        - name: max_rating
          in: query
          description: "Максимальный рейтинг подборки (число с плавающей точкой, 0–5)"
          schema:
            type: number
            format: float
        - name: tags
          in: query
          description: "Теги подборки, разделённые запятой (например, park,forest)"
          schema:
            type: string
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
        - name: order
          in: query
          description: >
            Параметр сортировки. Допустимые значения: **rating_desc**, **rating_asc**, **created_desc**, **created_asc**.
          schema:
            type: string
      responses:
        "200":
          description: "Список найденных подборок (id) с заголовками пагинации."
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: integer
        "400":
          description: "Некорректные параметры (например, неверный формат рейтинга)."
        "500":
          description: "Внутренняя ошибка сервера."
  /api/search/borders:
    get:
      summary: "Получение граничных значений фильтров маршрутов"
      description: >
        Возвращает минимальные и максимальные значения для длины (в метрах)
        и длительности (в секундах) маршрутов, которые не удалены (is_deleted = false).
      responses:
        "200":
          description: "Граничные значения успешно получены."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BordersResponse'
        "500":
          description: "Внутренняя ошибка сервера."
  /api/moderation/entity/report:
    post:
      summary: "Жалоба"
      description: "Отправка жалобы на объект, такой как пользователь, комментарий, рецензия, пост или маршрут"
      parameters:
        - $ref: '#/components/parameters/SessionTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                object_type:
                  type: string
                  enum: ["user", "review", "route", "comment"]
                object_id:
                  type: integer
                reason:
                  type: string
                  enum: ["spam or advertising", "inappropriate content", "violation of community rules", "offensive content"]
                details:
                  type: string
              example:
                user_id: 1
                object_type: "route"
                object_id: 1
                reason: "inappropriate content"
                details: "This route contains inappropriate language."
      responses:
        200:
          description: "Жалоба успешно отправлена"
  /api/moderation/entity/reports:
    get:
      summary: "Получение списка всех жалоб для модерации"
      description: "Получение всех отправленных жалоб, которые нуждаются в модерации"
      parameters:
        - $ref: '#/components/parameters/SessionTokenHeader'
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: ["opened", "closed"]
          description: "Статус репорта"
          example: "opened"
      responses:
        200:
          description: "Список жалоб"
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  reports:
                    type: array
                    items:
                      type: object
                      properties:
                        report_id:
                          type: integer
                        user_id:
                          type: integer
                        object_type:
                          type: string
                          enum: ["user", "review", "route", "comment"]
                        object_id:
                          type: integer
                        reason:
                          type: string
                          enum: ["spam or advertising", "inappropriate content", "violation of community rules", "offensive content"]
                        details:
                          type: string
                        created_at:
                          type: integer
                          format: int64
                        closed_at:
                          type: integer
                          format: int64
                        status:
                          type: string
                          enum: ["opened", "closed"]
                example:
                  reports:
                    - report_id: 1
                      user_id: 1
                      object_type: "route"
                      object_id: 1
                      reason: "inappropriate content"
                      details: "This route contains inappropriate language."
                      status: "closed"
                      created_at: 1616179200
                      closed_at: 1616179200
  /api/moderation/entity/report/resolve:
    post:
      summary: "Закрытие жалобы после рассмотрения"
      description: "Отметка жалобы как решённой после рассмотрения модератором"
      parameters:
        - $ref: '#/components/parameters/SessionTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                report_id:
                  type: integer
                resolution:
                  type: string
              example:
                user_id: 1
                report_id: 1
                resolution: "The issue has been resolved, and the content has been edited."
      responses:
        200:
          description: "Жалоба успешно закрыта"
  /api/moderation/bug/report:
    post:
      summary: "Отправка отчёта об ошибке"
      description: "Отправка отчёта о найденной ошибке для её дальнейшего рассмотрения."
      parameters:
        - $ref: '#/components/parameters/SessionTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                description:
                  type: string
              example:
                user_id: 1
                description: "The app crashes when trying to upload a large file."
      responses:
        200:
          description: "Отчёт об ошибке успешно отправлен"
  /api/moderation/bug/reports:
    get:
      summary: "Получение списка баг-репортов"
      description: "Получение всех отправленных отчётов об ошибках для модераторов или разработчиков."
      parameters:
        - $ref: '#/components/parameters/SessionTokenHeader'
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
      responses:
        200:
          description: "Список баг-репортов"
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  bug_reports:
                    type: array
                    items:
                      type: object
                      properties:
                        report_id:
                          type: integer
                        user_id:
                          type: integer
                        description:
                          type: string
                        status:
                          type: string
                          enum: ["opened", "closed"]
                        created_at:
                          type: integer
                        closed_at:
                          type: integer
                      example:
                        report_id: 1
                        user_id: 1
                        description: "The app crashes when trying to upload a large file."
                        status: "opened"
                        created_at: 1616179200
                        closed_at: 1616179200
  /api/moderation/bug/report/resolve:
    post:
      summary: "Закрытие баг-репорта"
      description: "Отметка баг-репорта как решённого после исправления."
      parameters:
        - $ref: '#/components/parameters/SessionTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                report_id:
                  type: string
                resolution:
                  type: string
              example:
                user_id: 1
                report_id: 1
                resolution: "Fixed the file upload issue by optimizing memory handling."
      responses:
        200:
          description: "Баг-репорт успешно закрыт"
  /api/moderation/routes:
    get:
      summary: "Получение списка маршрутов, ожидающих модерации"
      description: "Получение маршрутов, которые требуют одобрения перед публикацией."
      parameters:
        - $ref: '#/components/parameters/SessionTokenHeader'
        - $ref: '#/components/parameters/PaginationPageNumber'
        - $ref: '#/components/parameters/PaginationPerPage'
        - name: status
          in: query
          required: true
          schema:
            type: string
            enum: ["pending", "approved", "rejected"]
          description: "Статус репорта"
          example: "approved"
      responses:
        200:
          description: "Список маршрутов, ожидающих модерации"
          headers:
            pagination-current-page:
              $ref: '#/components/headers/PaginationCurrentPage'
            pagination-total-elements:
              $ref: '#/components/headers/PaginationTotalElements'
            pagination-per-page:
              $ref: '#/components/headers/PaginationPerPage'
            pagination-total-pages:
              $ref: '#/components/headers/PaginationTotalPages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  routes:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: object
                          properties:
                            user_id:
                              type: integer
                              description: "ID юзера"
                              example: 1
                            name:
                              type: string
                              description: "Имя пользователя"
                              example: "Алла Иванова"
                            image_url:
                              type: string
                              description: "URL аватарки"
                              example: "url"
                        route:
                          type: object
                          properties:
                            route_id:
                              type: integer
                              description: "ID маршрута"
                              example: 123
                            name:
                              type: string
                              description: "Название маршрута"
                              example: "Mountain Trail"
                            url:
                              type: string
                              description: "URL маршрута"
                              example: "url"
                            description:
                              type: string
                              description: "Описание маршрута"
                              example: "A beautiful trail in the mountains"
                            length:
                              type: integer
                              description: "Длина маршрута в метрах"
                              example: 5000
                            duration:
                              type: integer
                              description: "Продолжительность маршрута в секундах"
                              example: 7200
                            tags:
                              type: array
                              items:
                                type: string
                                enum: ["forest", "park", "near_water"]
                              description: "Теги маршрута"
                              example: ["forest", "near_water"]
                            category:
                              type: string
                              enum: ["walking"]
                              description: "Категория маршрута"
                              example: "walking"
                            created_at:
                              type: integer
                              description: "Дата создания маршрута в формате Unix"
                              example: 1616179200
                            status:
                              type: string
                              enum: ["pending", "approved", "rejected"]
                              description: "Статус маршрута"
                              example: "approved"
                            is_deleted:
                              type: boolean
                              description: "Флаг удаления маршрута"
                              example: false
                            rating:
                              type: number
                              format: float
                              description: "Средний рейтинг маршрута"
                              example: 3.5
                            images:
                              type: array
                              items:
                                type: string
                              description: "Ссылки на изображения маршрута"
                              example: ["url_to_image1", "url_to_image2"]
                        points:
                          type: array
                          description: "Точки маршрута с координатами и дополнительной информацией"
                          items:
                            type: object
                            properties:
                              point_id:
                                type: integer
                                description: "ID точки маршрута"
                                example: 1
                              coordinate:
                                $ref: '#/components/schemas/Coordinate'
                              time_offset:
                                type: integer
                                description: "Время в секундах с начала маршрута"
                                example: 300
                              elevation:
                                type: integer
                                description: "Высота точки над уровнем моря в метрах"
                                example: 200
                              speed:
                                type: number
                                format: float
                                description: "Скорость на этой точке маршрута"
                                example: 2.5
                              point_description:
                                type: string
                                description: "Описание точки маршрута"
                                example: "Поворот у дерева"
                              images:
                                type: array
                                items:
                                  type: string
                                description: "Изображения, связанные с точкой маршрута"
                                example: ["url_to_image1", "url_to_image2"]
                      example:
                        user:
                          user_id: 1
                          name: "Алла Майонезова"
                          image_url: "image"
                        route:
                          route_id: 123
                          name: "Mountain Trail"
                          url: "url"
                          description: "A beautiful trail in the mountains"
                          length: 5000
                          duration: 7200
                          tags: ["forest", "near_water"]
                          category: "walking"
                          created_at: 1616179200
                          rating: 3.5
                          images: ["url_to_image1", "url_to_image2"]
                        points:
                          - point_id: 1
                            coordinate:
                              latitude: 45.12345
                              longitude: 12.12345
                            time_offset: 300
                            elevation: 200
                            speed: 2.5
                            point_description: "Поворот у дерева"
                            images: ["url_to_image1", "url_to_image2"]
  /api/moderation/route/approve:
    post:
      summary: "Одобрение маршрута"
      description: "Позволяет модератору одобрить маршрут."
      parameters:
        - $ref: '#/components/parameters/SessionTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                object_type:
                  type: string
                  enum: ["route", "post", "comment", "collection"]
                object_id:
                  type: integer
              example:
                user_id: 1
                object_type: "route"
                object_id: 1
      responses:
        200:
          description: "Маршрут успешно одобрен"
  /api/moderation/route/reject:
    post:
      summary: "Отклонение маршрута"
      description: "Позволяет модератору отклонить маршрут."
      parameters:
        - $ref: '#/components/parameters/SessionTokenHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                object_type:
                  type: string
                  enum: ["route", "post", "comment", "collection"]
                object_id:
                  type: integer
                reason:
                  type: string
              example:
                user_id: 1
                object_type: "route"
                object_id: 1
                reason: "The route description is incomplete."
      responses:
        200:
          description: "Маршрут отклонён"
  /api/media/image/upload:
    post:
      summary: "Загрузка изображения"
      description: "Позволяет загрузить изображение в MinIO. Возвращает JSON с уникальным именем изображения."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "Файл изображения"
              required:
                - file
      responses:
        "200":
          description: "Изображение успешно загружено"
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_url:
                    type: string
                    description: "Уникальное имя изображения (ключ), которое используется для получения изображения"
                    example: "ee8ae9b6-8d0f-42c5-8581-fa75df64fc07_2.jpg"
        "400":
          description: "Ошибка запроса – файл не предоставлен"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No file provided"
        "500":
          description: "Внутренняя ошибка сервиса при загрузке изображения"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Upload failed"
  /api/media/image/{image-name}:
    get:
      summary: "Получение изображения"
      description: "Позволяет получить изображение по его уникальному имени, загруженному в MinIO."
      parameters:
        - $ref: '#/components/parameters/ImageNameParam'
      responses:
        "200":
          description: "Изображение успешно получено"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: "Изображение не найдено"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Image not found"
        "500":
          description: "Внутренняя ошибка сервиса при получении изображения"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to collect object body"
    delete:
      summary: "Удаление изображения"
      description: "Удаляет изображение по его уникальному имени из MinIO."
      parameters:
        - $ref: '#/components/parameters/ImageNameParam'
      responses:
        '200':
          description: "Изображение успешно удалено"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: "Внутренняя ошибка сервиса при удалении изображения"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    sessionCookie:
      type: apiKey
      in: cookie
      name: session_token
  headers:
    PaginationCurrentPage:
      description: "Текущая страница"
      schema:
        type: integer
        example: 1
    PaginationTotalElements:
      description: "Общее количество элементов"
      schema:
        type: integer
    PaginationPerPage:
      description: "Количество элементов на странице"
      schema:
        type: integer
        example: 10
    PaginationTotalPages:
      description: "Общее количество страниц"
      schema:
        type: integer
        example: 1
  parameters:
    ImageNameParam:
      name: image-name
      in: path
      required: true
      description: "Уникальное имя изображения (ключ), возвращенное при загрузке"
      schema:
        type: string
    PaginationPageNumber:
      name: pagination-page-number
      in: query
      description: "Номер страницы (по умолчанию 1)"
      schema:
        type: integer
        minimum: 1
        example: 1
    PaginationPerPage:
      name: pagination-per-page
      in: query
      description: "Количество элементов на странице (по умолчанию 10)"
      schema:
        type: integer
        minimum: 1
        maximum: 100
        example: 10
    RouteIdParam:
      name: route-id
      in: path
      required: true
      description: "Идентификатор маршрута"
      schema:
        type: integer
    ReviewIdParam:
      name: review-id
      in: path
      required: true
      description: "Идентификатор рецензии"
      schema:
        type: integer
    CollectionIdParam:
      name: collection-id
      in: path
      required: true
      description: "Идентификатор подборки"
      schema:
        type: integer
    CommentIdParam:
      name: comment-id
      in: path
      required: true
      description: "Идентификатор комментария"
      schema:
        type: integer
    UsernameParam:
      name: username
      in: path
      required: true
      description: "Имя пользователя"
      schema:
        type: string
    SessionTokenCookie:
      name: session_token
      in: cookie
      required: true
      description: "Токен сессии пользователя"
      schema:
        type: string
    SessionTokenHeader:
      name: session-token
      in: header
      required: true
      description: "Токен сессии"
      schema:
        type: string
  schemas:
    PublicUserProfileResponse:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
        name:
          type: string
        surname:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        instagram:
          type: string
          nullable: true
        facebook:
          type: string
          nullable: true
        x:
          type: string
          nullable: true
        vkontakte:
          type: string
          nullable: true
        telegram:
          type: string
          nullable: true
        youtube:
          type: string
          nullable: true
        user_site:
          type: string
          nullable: true
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        completed_routes:
          type: array
          items:
            $ref: '#/components/schemas/CompletedRoute'
    Route:
      type: object
      properties:
        route_id:
          type: integer
        name:
          type: string
        url:
          type: string
        description:
          type: string
          nullable: true
        length:
          type: integer
        duration:
          type: integer
        tags:
          type: array
          items:
            type: string
          nullable: true
        category:
          type: string
        created_at:
          type: string
          format: date-time
        status:
          type: string
        rating:
          type: number
          format: float
        images:
          type: array
          items:
            type: string
          nullable: true
    Collection:
      type: object
      properties:
        collection_id:
          type: integer
        name:
          type: string
        rating:
          type: number
          format: float
          nullable: true
        url:
          type: string
        description:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        imgs:
          type: array
          items:
            type: string
          description: "Массив URL изображений маршрутов, входящих в подборку"
      required:
        - collection_id
        - name
        - url
        - created_at
        - imgs
    CollectionDetail:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDetails'
        collection:
          $ref: '#/components/schemas/Collection'
        routes:
          type: object
          properties:
            amount:
              type: integer
            ids:
              type: array
              items:
                type: integer
    Review:
      type: object
      properties:
        review_id:
          type: integer
        route_id:
          type: integer
        rating:
          type: number
          format: float
          nullable: true
        comment:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        images:
          type: array
          items:
            type: string
          nullable: true
    CompletedRoute:
      type: object
      properties:
        route_id:
          type: integer
        completed_at:
          type: string
          format: date-time
    RoutesResponse:
      type: object
      properties:
        routes:
          type: array
          items:
            type: integer
          description: "Список идентификаторов маршрутов"
    RouteDetails:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDetails'
        route:
          $ref: '#/components/schemas/Route'
        points:
          type: array
          items:
            $ref: '#/components/schemas/PointInfo'
    Error:
      type: object
      properties:
        error:
          type: string
    UserDetails:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        image_url:
          type: string
          nullable: true
    RouteInfo:
      type: object
      properties:
        route_id:
          type: integer
        name:
          type: string
        url:
          type: string
        description:
          type: string
          nullable: true
        length:
          type: integer
        duration:
          type: integer
        tags:
          type: array
          items:
            type: string
          nullable: true
        category:
          type: string
        created_at:
          type: integer
          description: "Unix timestamp"
        status:
          type: string
        is_deleted:
          type: boolean
        rating:
          type: number
          format: float
        images:
          type: array
          items:
            type: string
          nullable: true
    PointInfo:
      type: object
      properties:
        point_id:
          type: integer
        coordinate:
          $ref: '#/components/schemas/Coordinate'
        time_offset:
          type: integer
          nullable: true
        elevation:
          type: integer
          nullable: true
        speed:
          type: number
          format: float
          nullable: true
        point_description:
          type: string
          nullable: true
        images:
          type: array
          items:
            type: string
          nullable: true
    Coordinate:
      type: object
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
    CreateRouteRequest:
      type: object
      required:
        - name
        - length
        - duration
        - category
        - points
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        length:
          type: integer
        duration:
          type: integer
        tags:
          type: array
          items:
            type: string
          nullable: true
        category:
          type: string
        images:
          type: array
          items:
            type: string
          nullable: true
        points:
          type: array
          items:
            $ref: '#/components/schemas/CreatePointInfo'
    CreatePointInfo:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        time_offset:
          type: integer
          nullable: true
        elevation:
          type: integer
          nullable: true
        speed:
          type: number
          format: float
          nullable: true
        point_description:
          type: string
          nullable: true
        images:
          type: array
          items:
            type: string
          nullable: true
    UpdateRouteRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        length:
          type: integer
        duration:
          type: integer
        tags:
          type: array
          items:
            type: string
          nullable: true
        category:
          type: string
        images:
          type: array
          items:
            type: string
          nullable: true
        points:
          type: array
          items:
            $ref: '#/components/schemas/UpdatePointInfo'
    UpdatePointInfo:
      type: object
      properties:
        point_id:
          type: integer
          nullable: true
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        time_offset:
          type: integer
          nullable: true
        elevation:
          type: integer
          nullable: true
        speed:
          type: number
          format: float
          nullable: true
        point_description:
          type: string
          nullable: true
        images:
          type: array
          items:
            type: string
          nullable: true
    UserSettings:
      type: object
      properties:
        show_phone:
          type: boolean
        show_planned:
          type: boolean
        show_visited:
          type: boolean
      required:
        - show_phone
        - show_planned
        - show_visited
    UserSettingsUpdate:
      type: object
      properties:
        show_phone:
          type: boolean
        show_planned:
          type: boolean
        show_visited:
          type: boolean
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
    RegisterResponse:
      type: object
      properties:
        user_id:
          type: integer
        token:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: Operation successful"
    Comment:
      type: object
      properties:
        comment_id:
          type: integer
          description: "Идентификатор комментария"
        user_id:
          type: integer
          description: "ID пользователя, оставившего комментарий"
        text:
          type: string
          description: "Текст комментария"
        created_at:
          type: integer
          description: "Дата создания комментария (Unix timestamp)"
        images:
          type: array
          items:
            type: string
          description: "Ссылки на изображения комментария"
        reply_to:
          type: integer
          nullable: true
          description: "Идентификатор родительского комментария (если это ответ)"
    CreateCommentRequest:
      type: object
      properties:
        reply_to:
          type: integer
          nullable: true
          description: "Идентификатор родительского комментария (если комментарий является ответом)"
        text:
          type: string
          description: "Текст комментария. Может быть пустым, если переданы изображения."
        images:
          type: array
          items:
            type: string
          description: "Массив данных изображений для загрузки"
      example:
        reply_to: 5
        text: "Отличный обзор!"
        images: ["base64data1", "base64data2"]
    DeleteCommentRequest:
      type: object
      properties:
        comment_id:
          type: integer
          description: "Идентификатор комментария, который необходимо удалить"
      example:
        comment_id: 1
    MeResponse:
      type: object
      properties:
        username:
          type: string
          example: "john_doe"
        user_id:
          type: integer
          example: 1
    UserBriefResponse:
      type: object
      properties:
        user_id:
          type: integer
          description: "Уникальный идентификатор пользователя"
        username:
          type: string
          description: "Логин или псевдоним пользователя"
        name:
          type: string
          description: "Имя пользователя"
        surname:
          type: string
          nullable: true
          description: "Фамилия пользователя (если указана)"
        avatar_url:
          type: string
          nullable: true
          description: "Ссылка на фотографию профиля пользователя"
    BordersResponse:
      type: object
      properties:
        min_length:
          type: integer
          description: "Минимальная длина маршрута (м)"
        max_length:
          type: integer
          description: "Максимальная длина маршрута (м)"
        min_duration:
          type: integer
          description: "Минимальная длительность маршрута (сек)"
        max_duration:
          type: integer
          description: "Максимальная длительность маршрута (сек)"
    SavedRoutesResponse:
      type: object
      properties:
        routes:
          type: array
          items:
            type: integer
          description: "Список идентификаторов сохраненных маршрутов"