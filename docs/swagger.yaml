openapi: "3.0.0"
info:
  title: "33routes API Documentation"
  description: "API для backend-сервисов 33routes."
  version: "1.0.0"
servers:
  - url: http://localhost:8100
  - url: https://33routes.ru
paths:
  /api/route/routes:
    get:
      summary: "Получить список маршрутов"
      description: "Возвращает список идентификаторов маршрутов с поддержкой пагинации."
      parameters:
        - in: query
          name: pagination-page-number
          description: "Номер страницы (по умолчанию 1)"
          schema:
            type: integer
            minimum: 1
          example: 1
        - in: query
          name: pagination-per-page
          description: "Количество маршрутов на странице (по умолчанию 10)"
          schema:
            type: integer
            minimum: 1
            maximum: 100
          example: 10
      responses:
        '200':
          description: "Список маршрутов успешно получен"
          headers:
            pagination-current-page:
              description: "Текущая страница"
              schema:
                type: integer
            pagination-total-elements:
              description: "Общее количество маршрутов"
              schema:
                type: integer
            pagination-per-page:
              description: "Количество маршрутов на странице"
              schema:
                type: integer
            pagination-total-pages:
              description: "Общее количество страниц"
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'
  /api/route/route/{route-id}:
    get:
      summary: "Получить подробности маршрута"
      description: "Возвращает подробную информацию о маршруте, включая данные пользователя и точки маршрута."
      parameters:
        - in: path
          name: route-id
          required: true
          description: "Идентификатор маршрута"
          schema:
            type: integer
      responses:
        '200':
          description: "Детали маршрута успешно получены"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteDetails'
        '404':
          description: "Маршрут не найден"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: "Обновить маршрут"
      description: "Обновляет информацию о маршруте. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
        - in: path
          name: route-id
          required: true
          description: "Идентификатор маршрута"
          schema:
            type: integer
      requestBody:
        description: "Данные для обновления маршрута (передаются только изменённые поля)"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteRequest'
      responses:
        '200':
          description: "Маршрут успешно обновлён"
        '401':
          description: "Неавторизованный запрос"
        '403':
          description: "Нет прав для обновления маршрута"
        '404':
          description: "Маршрут не найден"
        '500':
          description: "Ошибка сервера"
    delete:
      summary: "Удалить маршрут"
      description: "Выполняет мягкое удаление маршрута (soft delete). Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
        - in: path
          name: route-id
          required: true
          description: "Идентификатор маршрута"
          schema:
            type: integer
      responses:
        '200':
          description: "Маршрут успешно удалён"
        '401':
          description: "Неавторизованный запрос"
        '403':
          description: "Нет прав для удаления маршрута"
        '404':
          description: "Маршрут не найден"
        '500':
          description: "Ошибка сервера"
  /api/route/route:
    post:
      summary: "Создать маршрут"
      description: "Создает новый маршрут с точками и изображениями. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
      requestBody:
        description: "Данные нового маршрута"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRouteRequest'
      responses:
        '201':
          description: "Маршрут успешно создан"
        '401':
          description: "Неавторизованный запрос"
        '500':
          description: "Ошибка сервера"
  /api/review/route/{route-id}/reviews:
    get:
      summary: "Получение списка рецензий маршрута"
      description: "Возвращает список рецензий для указанного маршрута с поддержкой пагинации."
      parameters:
        - in: path
          name: route-id
          required: true
          description: "ID маршрута"
          schema:
            type: integer
        - in: query
          name: pagination-page-number
          description: "Номер страницы (по умолчанию 1)"
          schema:
            type: integer
            minimum: 1
          example: 1
        - in: query
          name: pagination-per-page
          description: "Количество элементов на странице (по умолчанию 10)"
          schema:
            type: integer
            minimum: 1
            maximum: 100
          example: 10
      responses:
        '200':
          description: "Список рецензий маршрута"
          headers:
            pagination-current-page:
              description: "Текущая страница пагинации"
              schema:
                type: integer
                example: 1
            pagination-total-elements:
              description: "Общее количество рецензий"
              schema:
                type: integer
                example: 5
            pagination-per-page:
              description: "Количество элементов на странице"
              schema:
                type: integer
                example: 3
            pagination-total-pages:
              description: "Общее количество страниц"
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'
                example:
                  reviews:
                    - review_id: 1
                      user_id: 123
                      rating: 4.5
                      comment: "Отличный маршрут!"
                      created_at: 1616179200
                      images: ["url_to_image1", "url_to_image2"]
  /api/review/route/{route-id}/review:
    post:
      summary: "Добавление рецензии"
      description: "Позволяет пользователю добавить рецензию к маршруту. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: path
          name: route-id
          required: true
          description: "ID маршрута"
          schema:
            type: integer
      requestBody:
        description: "Данные рецензии"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                rating:
                  type: number
                  format: float
                comment:
                  type: string
                images:
                  type: array
                  items:
                    type: string
              example:
                user_id: 1
                rating: 4.5
                comment: "Amazing route, highly recommended!"
                images: ["url_to_image1", "url_to_image2"]
      responses:
        '200':
          description: "Рецензия успешно добавлена"
    delete:
      summary: "Удаление рецензии"
      description: "Позволяет пользователю удалить свою рецензию для маршрута. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: path
          name: route-id
          required: true
          description: "ID маршрута"
          schema:
            type: integer
      requestBody:
        description: "Данные для удаления рецензии"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                review_id:
                  type: integer
              example:
                user_id: 1
                review_id: 1
      responses:
        '200':
          description: "Рецензия успешно удалена"
  /api/comment/review/{review-id}/comments:
    get:
      summary: "Получить комментарии к рецензии"
      description: "Возвращает список комментариев для указанной рецензии с поддержкой пагинации."
      parameters:
        - in: path
          name: review-id
          required: true
          description: "ID рецензии"
          schema:
            type: integer
        - in: query
          name: pagination-page-number
          description: "Номер страницы (по умолчанию 1)"
          schema:
            type: integer
            minimum: 1
          example: 1
        - in: query
          name: pagination-per-page
          description: "Количество комментариев на странице (по умолчанию 10)"
          schema:
            type: integer
            minimum: 1
            maximum: 100
          example: 10
      responses:
        '200':
          description: "Список комментариев"
          headers:
            pagination-current-page:
              description: "Текущая страница"
              schema:
                type: integer
                example: 1
            pagination-total-elements:
              description: "Общее количество комментариев"
              schema:
                type: integer
                example: 5
            pagination-per-page:
              description: "Количество элементов на странице"
              schema:
                type: integer
                example: 3
            pagination-total-pages:
              description: "Общее количество страниц"
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                example:
                  comments:
                    - id: 1
                      user_id: 123
                      text: "Great route!"
                      created_at: 1616179200
                      images: ["url1", "url2"]
  /api/comment/review/{review-id}/comment:
    post:
      summary: "Добавление комментария"
      description: "Позволяет пользователю добавить комментарий к рецензии. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: path
          name: review-id
          required: true
          description: "ID рецензии"
          schema:
            type: integer
      requestBody:
        description: "Данные комментария"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentRequest'
      responses:
        '200':
          description: "Комментарий успешно добавлен"
    delete:
      summary: "Удаление комментария"
      description: "Позволяет пользователю удалить комментарий к рецензии. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: path
          name: review-id
          required: true
          description: "ID рецензии"
          schema:
            type: integer
      requestBody:
        description: "Данные для удаления комментария"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommentRequest'
      responses:
        '200':
          description: "Комментарий успешно удалён"
  /api/collection/collections:
    get:
      summary: "Получение списка подборок"
      description: "Возвращает список идентификаторов подборок с поддержкой пагинации."
      parameters:
        - in: query
          name: pagination-page-number
          description: "Номер страницы (по умолчанию 1)"
          schema:
            type: integer
            minimum: 1
          example: 1
        - in: query
          name: pagination-per-page
          description: "Количество элементов на странице (по умолчанию 10)"
          schema:
            type: integer
            minimum: 1
            maximum: 100
          example: 10
      responses:
        '200':
          description: "Список подборок успешно получен"
          headers:
            pagination-current-page:
              description: "Текущая страница"
              schema:
                type: integer
            pagination-total-elements:
              description: "Общее количество подборок"
              schema:
                type: integer
            pagination-per-page:
              description: "Количество подборок на странице"
              schema:
                type: integer
            pagination-total-pages:
              description: "Общее количество страниц"
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: integer
                example:
                  results: [1, 2, 3]
  /api/collection/collection/{collection-id}:
    get:
      summary: "Получение информации о подборке"
      description: "Возвращает подробную информацию о выбранной подборке."
      parameters:
        - in: path
          name: collection-id
          required: true
          description: "ID подборки"
          schema:
            type: integer
      responses:
        '200':
          description: "Информация о подборке получена"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionDetail'
        '404':
          description: "Подборка не найдена"
  /api/collection/collection:
    post:
      summary: "Создание новой подборки"
      description: "Позволяет пользователю создать новую подборку. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      requestBody:
        description: "Данные для создания новой подборки"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCollectionRequest'
      responses:
        '201':
          description: "Подборка успешно создана"
        '500':
          description: "Ошибка сервера"
    put:
      summary: "Обновление подборки"
      description: "Позволяет пользователю обновить существующую подборку. Передаются только изменённые поля. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: header
          name: collection-id
          required: true
          description: "ID подборки"
          schema:
            type: integer
      requestBody:
        description: "Данные для обновления подборки"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCollectionRequest'
      responses:
        '200':
          description: "Подборка успешно обновлена"
    delete:
      summary: "Удаление подборки"
      description: "Позволяет пользователю удалить существующую подборку. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: header
          name: collection-id
          required: true
          description: "ID подборки"
          schema:
            type: integer
      requestBody:
        description: "Данные для удаления подборки"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCollectionRequest'
      responses:
        '200':
          description: "Подборка успешно удалена"
  /api/collection/collection/{collection-id}/add/{route-id}:
    put:
      summary: "Добавление маршрута в подборку"
      description: "Позволяет пользователю добавить маршрут в указанную подборку. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: path
          name: collection-id
          required: true
          description: "ID подборки"
          schema:
            type: integer
        - in: path
          name: route-id
          required: true
          description: "ID маршрута"
          schema:
            type: integer
      requestBody:
        description: "Данные для добавления маршрута в подборку"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: "Маршрут успешно добавлен в подборку"
  /api/collection/collection/{collection-id}/remove/{route-id}:
    delete:
      summary: "Удаление маршрута из подборки"
      description: "Позволяет пользователю удалить маршрут из указанной подборки. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: path
          name: collection-id
          required: true
          description: "ID подборки"
          schema:
            type: integer
        - in: path
          name: route-id
          required: true
          description: "ID маршрута"
          schema:
            type: integer
      requestBody:
        description: "Данные для удаления маршрута из подборки"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: "Маршрут успешно удален из подборки"
  /api/auth/register:
    post:
      summary: "Регистрация пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: "Пользователь успешно зарегистрирован"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '409':
          description: "Пользователь уже существует"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/auth/login:
    post:
      summary: "Авторизация пользователя"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: "Пользователь успешно авторизован"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: "Неавторизованный запрос"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/auth/check_token:
    post:
      summary: "Проверка валидности токена сессии"
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии"
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                backend_session_token:
                  type: string
                  description: "Backend session token"
      responses:
        '200':
          description: "Токен валиден"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
        '400':
          description: "Отсутствуют или неверны токены"
        '401':
          description: "Токен не прошёл проверку или не найден"
        '500':
          description: "Внутренняя ошибка сервиса"
  /api/like/comment/{comment-id}:
    post:
      summary: "Поставить лайк на комментарий"
      description: "Позволяет пользователю поставить лайк на комментарий. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
        - in: path
          name: comment-id
          required: true
          description: "ID комментария"
          schema:
            type: integer
      responses:
        '200':
          description: "Лайк успешно поставлен"
        '400':
          description: "Некорректный запрос"
        '401':
          description: "Пользователь не авторизован"
        '500':
          description: "Внутренняя ошибка сервиса"
    delete:
      summary: "Убрать лайк с комментария"
      description: "Позволяет пользователю убрать лайк с комментария. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
        - in: path
          name: comment-id
          required: true
          description: "ID комментария"
          schema:
            type: integer
      responses:
        '200':
          description: "Лайк успешно убран"
        '400':
          description: "Некорректный запрос"
        '401':
          description: "Пользователь не авторизован"
        '500':
          description: "Внутренняя ошибка сервиса"

  /api/like/review/{review-id}:
    post:
      summary: "Поставить лайк на рецензию"
      description: "Позволяет пользователю поставить лайк на рецензию. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
        - in: path
          name: review-id
          required: true
          description: "ID рецензии"
          schema:
            type: integer
      responses:
        '200':
          description: "Лайк успешно поставлен"
        '400':
          description: "Некорректный запрос"
        '401':
          description: "Пользователь не авторизован"
        '500':
          description: "Внутренняя ошибка сервиса"
    delete:
      summary: "Убрать лайк с рецензии"
      description: "Позволяет пользователю убрать лайк с рецензии. Требуется аутентификация через cookie session_token."
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
        - in: path
          name: review-id
          required: true
          description: "ID рецензии"
          schema:
            type: integer
      responses:
        '200':
          description: "Лайк успешно убран"
        '400':
          description: "Некорректный запрос"
        '401':
          description: "Пользователь не авторизован"
        '500':
          description: "Внутренняя ошибка сервиса"
  /api/user/{username}:
    get:
      summary: "Получить публичный профиль пользователя"
      description: "Возвращает публичный профиль пользователя по username."
      parameters:
        - in: path
          name: username
          required: true
          description: "Имя пользователя"
          schema:
            type: string
      responses:
        '200':
          description: "Публичный профиль успешно получен"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfileResponse'
        '404':
          description: "Пользователь не найден"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/user/delete:
    delete:
      summary: "Удалить профиль пользователя"
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
      responses:
        '200':
          description: "Профиль пользователя успешно удалён"
        '401':
          description: "Не авторизован"
        '404':
          description: "Пользователь не найден"
        '500':
          description: "Внутренняя ошибка сервера"
  /api/user/settings:
    get:
      summary: "Получить настройки пользователя"
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
      responses:
        '200':
          description: "Настройки пользователя успешно получены"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettings'
        '401':
          description: "Не авторизован"
        '404':
          description: "Настройки пользователя не найдены"
        '500':
          description: "Внутренняя ошибка сервера"
    put:
      summary: "Обновить настройки пользователя"
      security:
        - sessionCookie: []
      parameters:
        - in: cookie
          name: session_token
          required: true
          description: "Токен сессии пользователя"
          schema:
            type: string
      requestBody:
        description: "Объект с данными для обновления настроек"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSettingsUpdate'
      responses:
        '200':
          description: "Настройки пользователя успешно обновлены"
        '401':
          description: "Не авторизован"
        '500':
          description: "Внутренняя ошибка сервера"
components:
  securitySchemes:
    sessionCookie:
      type: apiKey
      in: cookie
      name: session_token
  schemas:
    PublicUserProfileResponse:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
        name:
          type: string
        surname:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        instagram:
          type: string
          nullable: true
        facebook:
          type: string
          nullable: true
        x:
          type: string
          nullable: true
        vkontakte:
          type: string
          nullable: true
        telegram:
          type: string
          nullable: true
        youtube:
          type: string
          nullable: true
        user_site:
          type: string
          nullable: true
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        completed_routes:
          type: array
          items:
            $ref: '#/components/schemas/CompletedRoute'
    Route:
      type: object
      properties:
        route_id:
          type: integer
        name:
          type: string
        url:
          type: string
        description:
          type: string
          nullable: true
        length:
          type: integer
        duration:
          type: integer
        tags:
          type: array
          items:
            type: string
          nullable: true
        category:
          type: string
        created_at:
          type: string
          format: date-time
        status:
          type: string
        rating:
          type: number
          format: float
        images:
          type: array
          items:
            type: string
          nullable: true
    Collection:
      type: object
      properties:
        collection_id:
          type: integer
        name:
          type: string
        rating:
          type: number
          format: float
          nullable: true
        url:
          type: string
        description:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        created_at:
          type: string
          format: date-time
    CollectionDetail:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDetails'
        collection:
          $ref: '#/components/schemas/Collection'
        routes:
          type: object
          properties:
            amount:
              type: integer
            ids:
              type: array
              items:
                type: integer
    Review:
      type: object
      properties:
        review_id:
          type: integer
        route_id:
          type: integer
        rating:
          type: number
          format: float
          nullable: true
        comment:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        images:
          type: array
          items:
            type: string
          nullable: true
    CompletedRoute:
      type: object
      properties:
        route_id:
          type: integer
        completed_at:
          type: string
          format: date-time
    RoutesResponse:
      type: object
      properties:
        routes:
          type: array
          items:
            type: integer
          description: "Список идентификаторов маршрутов"
    RouteDetails:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDetails'
        route:
          $ref: '#/components/schemas/Route'
        points:
          type: array
          items:
            $ref: '#/components/schemas/PointInfo'
    Error:
      type: object
      properties:
        error:
          type: string
    UserDetails:
      type: object
      properties:
        user_id:
          type: integer
        name:
          type: string
        image_url:
          type: string
          nullable: true
    RouteInfo:
      type: object
      properties:
        route_id:
          type: integer
        name:
          type: string
        url:
          type: string
        description:
          type: string
          nullable: true
        length:
          type: integer
        duration:
          type: integer
        tags:
          type: array
          items:
            type: string
          nullable: true
        category:
          type: string
        created_at:
          type: integer
          description: "Unix timestamp"
        status:
          type: string
        is_deleted:
          type: boolean
        rating:
          type: number
          format: float
        images:
          type: array
          items:
            type: string
          nullable: true
    PointInfo:
      type: object
      properties:
        point_id:
          type: integer
        coordinate:
          $ref: '#/components/schemas/Coordinate'
        time_offset:
          type: integer
          nullable: true
        elevation:
          type: integer
          nullable: true
        speed:
          type: number
          format: float
          nullable: true
        point_description:
          type: string
          nullable: true
        images:
          type: array
          items:
            type: string
          nullable: true
    Coordinate:
      type: object
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
    CreateRouteRequest:
      type: object
      required:
        - name
        - length
        - duration
        - category
        - points
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        length:
          type: integer
        duration:
          type: integer
        tags:
          type: array
          items:
            type: string
          nullable: true
        category:
          type: string
        images:
          type: array
          items:
            type: string
          nullable: true
        points:
          type: array
          items:
            $ref: '#/components/schemas/CreatePointInfo'
    CreatePointInfo:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        time_offset:
          type: integer
          nullable: true
        elevation:
          type: integer
          nullable: true
        speed:
          type: number
          format: float
          nullable: true
        point_description:
          type: string
          nullable: true
        images:
          type: array
          items:
            type: string
          nullable: true
    UpdateRouteRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        length:
          type: integer
        duration:
          type: integer
        tags:
          type: array
          items:
            type: string
          nullable: true
        category:
          type: string
        images:
          type: array
          items:
            type: string
          nullable: true
        points:
          type: array
          items:
            $ref: '#/components/schemas/UpdatePointInfo'
    UpdatePointInfo:
      type: object
      properties:
        point_id:
          type: integer
          nullable: true
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        time_offset:
          type: integer
          nullable: true
        elevation:
          type: integer
          nullable: true
        speed:
          type: number
          format: float
          nullable: true
        point_description:
          type: string
          nullable: true
        images:
          type: array
          items:
            type: string
          nullable: true
    UserSettings:
      type: object
      properties:
        show_phone:
          type: boolean
        show_planned:
          type: boolean
        show_visited:
          type: boolean
      required:
        - show_phone
        - show_planned
        - show_visited
    UserSettingsUpdate:
      type: object
      properties:
        show_phone:
          type: boolean
        show_planned:
          type: boolean
        show_visited:
          type: boolean
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string
    RegisterResponse:
      type: object
      properties:
        user_id:
          type: integer
        token:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string