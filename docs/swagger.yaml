openapi: "3.0.0"
info:
  title: "33routes API Documentation"
  description: "API for 33routes backend services."
  version: "1.0.0"
servers:
  - url: http://localhost:8100
  - url: https://33routes.ru
paths:


  /api/route/routes:
    get:
      summary: "Получение списка маршрутов"
      description: "Возвращает список id всех доступных маршрутов."
      parameters:
        - in: query
          name: pagination-page-number
          required: false
          schema:
            type: integer
            minimum: 1
          description: "Номер страницы для отображения (по умолчанию 1)"
          example: 1
        - in: query
          name: pagination-per-page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: "Количество элементов на странице (по умолчанию 10)"
          example: 10
      responses:
        200:
          description: "Список id маршрутов"
          headers:
            pagination-current-page:
              description: "Текущая страница пагинации"
              schema:
                type: integer
                example: 1
            pagination-total-elements:
              description: "Общее количество страниц"
              schema:
                type: integer
                example: 5
            pagination-per-page:
              description: "Количество элементов на странице"
              schema:
                type: integer
                example: 3
            pagination-total-pages:
              description: "Количество страниц"
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  routes:
                    type: array
                    items:
                      type: integer
                    description: "ID маршрута"
                example:
                  routes: [ 
                    1,
                    2,
                    3
                  ]

  /api/route/route/{route-id}:
    get:
      summary: "Просмотр информации о маршруте"
      description: "Возвращает подробную информацию о выбранном маршруте."
      parameters:
        - name: route-id
          in: path
          required: true
          schema:
            type: integer
            example: 123
      responses:
        200:
          description: "Детали маршрута"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      user_id:
                        type: integer
                        description: "ID юзера"
                        example: 1
                      name:
                        type: string
                        description: "ID юзера"
                        example: "Алла Иванова"
                      image_url:
                        type: string
                        description: "url аватарки"
                        example: "url"
                  route:
                    type: object
                    properties:
                      route_id:
                        type: integer
                        description: "ID маршрута"
                        example: 123
                      name:
                        type: string
                        description: "Название маршрута"
                        example: "Mountain Trail"
                      url:
                        type: string
                        description: "URL маршрута"
                        example: "url"
                      description:
                        type: string
                        description: "Описание маршрута"
                        example: "A beautiful trail in the mountains"
                      length:
                        type: integer
                        description: "Длина маршрута в метрах"
                        example: 5000
                      duration:
                        type: integer
                        description: "Продолжительность маршрута в секундах"
                        example: 7200
                      tags:
                        type: array
                        items:
                          type: string
                          enum: ["forest", "park", "near_water"]
                        description: "Теги маршрута"
                        example: ["forest", "near_water"]
                      category:
                        type: string
                        enum: ["walking"]
                        description: "Категория маршрута"
                        example: "walking"
                      created_at:
                        type: integer
                        description: "Дата создания маршрута в формате Unix"
                        example: 1616179200
                      status:
                        type: string
                        enum: ["pending", "approved", "rejected"]
                        description: "Статус маршрута"
                        example: "approved"
                      is_deleted:
                        type: boolean
                        description: "Флаг удаления маршрута"
                        example: false
                      rating:
                        type: number
                        format: float
                        description: "Средний рейтинг маршрута"
                        example: 3.5
                      images:
                        type: array
                        items:
                          type: string
                        description: "Ссылки на изображения маршрута"
                        example: ["url_to_image1", "url_to_image2"]
                  points:
                    type: array
                    description: "Точки маршрута с координатами и дополнительной информацией"
                    items:
                      type: object
                      properties:
                        point_id:
                          type: integer
                          description: "ID точки маршрута"
                          example: 1
                        coordinate:
                          type: object
                          properties:
                            latitude:
                              type: number
                              format: float
                              description: "Широта"
                              example: 45.12345
                            longitude:
                              type: number
                              format: float
                              description: "Долгота"
                              example: 12.12345
                        time_offset:
                          type: integer
                          description: "Время в секундах с начала маршрута"
                          example: 300
                        elevation:
                          type: integer
                          description: "Высота точки над уровнем моря в метрах"
                          example: 200
                        speed:
                          type: number
                          format: float
                          description: "Скорость на этой точке маршрута"
                          example: 2.5
                        point_description:
                          type: string
                          description: "Описание точки маршрута"
                          example: "Поворот у дерева"
                        images:
                          type: array
                          items:
                            type: string
                          description: "Изображения, связанные с точкой маршрута"
                          example: ["url_to_image1", "url_to_image2"]
                example:
                  user:
                    user_id: 1
                    name: "Алла Майонезова"
                    image_url: "image"
                  route:
                    route_id: 123
                    name: "Mountain Trail"
                    url: "url"
                    description: "A beautiful trail in the mountains"
                    length: 5000
                    duration: 7200
                    tags: ["forest", "near_water"]
                    category: "walking"
                    created_at: 1616179200
                    rating: 3.5
                    images: ["url_to_image1", "url_to_image2"]
                  points:
                    - point_id: 1
                      coordinate:
                        latitude: 45.12345
                        longitude: 12.12345
                      time_offset: 300
                      elevation: 200
                      speed: 2.5
                      point_description: "Поворот у дерева"
                      images: ["url_to_image1", "url_to_image2"]

  /api/review/route/{route-id}/reviews:
    get:
      summary: "Получение списка рецензий маршрута"
      description: "Возвращает список рецензий, связанных с указанным маршрутом."
      parameters:
        - in: path
          name: route-id
          required: true
          schema:
            type: integer
          description: "ID маршрута"
        - in: query
          name: pagination-page-number
          required: false
          schema:
            type: integer
            minimum: 1
          description: "Номер страницы для отображения (по умолчанию 1)"
          example: 1
        - in: query
          name: pagination-per-page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: "Количество элементов на странице (по умолчанию 10)"
          example: 10
      responses:
        200:
          description: "Список рецензий маршрута"
          headers:
            pagination-current-page:
              description: "Текущая страница пагинации"
              schema:
                type: integer
                example: 1
            pagination-total-elements:
              description: "Общее количество страниц"
              schema:
                type: integer
                example: 5
            pagination-per-page:
              description: "Количество элементов на странице"
              schema:
                type: integer
                example: 3
            pagination-total-pages:
              description: "Количество страниц"
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        review_id:
                          type: integer
                          description: "ID рецензии"
                        user_id:
                          type: integer
                          description: "ID пользователя, оставившего рецензию"
                        rating:
                          type: number
                          format: float
                          description: "Рейтинг, выставленный пользователем"
                        comment:
                          type: string
                          description: "Текст рецензии"
                        created_at:
                          type: integer
                          description: "Дата создания рецензии в формате Unix"
                        images:
                          type: array
                          items:
                            type: string
                          description: "Ссылки на изображения"
                example:
                  reviews:
                    - review_id: 1
                      user_id: 123
                      rating: 4.5
                      comment: "Отличный маршрут!"
                      created_at: 1616179200
                      images: ["url_to_image1", "url_to_image2"]

  /api/review/route/{route-id}/review:
    post:
      summary: "Добавление рецензии"
      description: "Позволяет пользователю добавить рецензию к указанному маршруту."
      parameters:
        - in: path
          name: route-id
          required: true
          schema:
            type: integer
          description: "ID маршрута"
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                  example: 1
                rating:
                  type: number
                  format: float
                  description: "Рейтинг маршрута от 0 до 5"
                  example: 4.5
                comment:
                  type: string
                  description: "Текст рецензии"
                  example: "Amazing route, highly recommended!"
                images:
                  type: array
                  items:
                    type: string
                  description: "Ссылки на изображения рецензии"
                  example: ["url_to_image1", "url_to_image2"]
      responses:
        200:
          description: "Рецензия успешно добавлена"

    delete:
      summary: "Удаление рецензии"
      description: "Позволяет пользователю удалить свою рецензию для указанного маршрута."
      parameters:
        - in: path
          name: route-id
          required: true
          schema:
            type: integer
          description: "ID маршрута"
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                  example: 1
                review_id:
                  type: integer
                  description: "ID рецензии"
                  example: 1
      responses:
        200:
          description: "Рецензия успешно удалена"

  /api/comment/review/{review-id}/comments:
    get:
      summary: "Получить комментарии к маршруту"
      description: "Возвращает список комментариев, связанных с указанной рецензией."
      parameters:
        - in: path
          name: review-id
          required: true
          schema:
            type: string
          description: "ID рецензии"
      responses:
        200:
          description: "Список комментариев"
          headers:
            pagination-current-page:
              description: "Текущая страница пагинации"
              schema:
                type: integer
                example: 1
            pagination-total-elements:
              description: "Общее количество страниц"
              schema:
                type: integer
                example: 5
            pagination-per-page:
              description: "Количество элементов на странице"
              schema:
                type: integer
                example: 3
            pagination-total-pages:
              description: "Количество страниц"
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "ID комментария"
                        user_id:
                          type: integer
                          description: "ID пользователя, оставившего комментарий"
                        text:
                          type: string
                          description: "Текст комментария"
                        created_at:
                          type: integer
                          description: "Дата и время создания комментария"
                        images:
                          type: array
                          items:
                            type: string
                            description: "url изображения"
                example:
                  comments: [ 
                    { 
                      id: 1, 
                      user_id: 123, 
                      text: "Great route!", 
                      created_at: 1616179200, 
                      images: ["url1", "url2"]
                    } 
                  ]

  /api/comment/review/{review-id}/comment:
    post:
      summary: "Добавление комментария"
      description: "Позволяет пользователю добавить комментарий к рецензии."
      parameters:
        - in: path
          name: review-id
          required: true
          schema:
            type: string
          description: "ID рецензии"
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                  example: 1
                text:
                  type: string
                  description: "Текст комментария"
                  example: "This is an amazing route!"
      responses:
        200:
          description: "Комментарий успешно добавлен"

    delete:
      summary: "Удаление комментария"
      description: "Позволяет пользователю удалить комментарий к рецензии."
      parameters:
        - in: path
          name: review-id
          required: true
          schema:
            type: string
          description: "ID рецензии"
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                  example: 1
                comment_id:
                  type: integer
                  description: "ID комментария"
                  example: 1
      responses:
        200:
          description: "Комментарий успешно удалён"

  /api/collection/collections:
    get:
      summary: "Получение списка подборок"
      description: "Возвращает список id всех доступных подборок."
      parameters:
        - in: query
          name: pagination-page-number
          required: false
          schema:
            type: integer
            minimum: 1
          description: "Номер страницы для отображения (по умолчанию 1)"
          example: 1
        - in: query
          name: pagination-per-page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: "Количество элементов на странице (по умолчанию 10)"
          example: 10
      responses:
        200:
          description: "Список id подборок"
          headers:
            pagination-current-page:
              description: "Текущая страница пагинации"
              schema:
                type: integer
                example: 1
            pagination-total-elements:
              description: "Общее количество страниц"
              schema:
                type: integer
                example: 5
            pagination-per-page:
              description: "Количество элементов на странице"
              schema:
                type: integer
                example: 3
            pagination-total-pages:
              description: "Количество страниц"
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    type: array
                    items:
                      type: integer
                    description: "ID подборки"
                example:
                  collections: [ 
                    1,
                    2,
                    3
                  ]

  /api/collection/collection/{collection-id}:
    get:
      summary: "Получение информации о подборке"
      description: "Возвращает подробную информацию о выбранной подборке."
      parameters:
        - in: path
          name: collection-id
          required: true
          schema:
            type: integer
          description: "ID подборки"
      responses:
        200:
          description: "Информация о подборке"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      user_id:
                        type: integer
                        description: "ID пользователя"
                      name:
                        type: string
                        description: "Имя пользователя"
                      image_url:
                        type: string
                        description: "URL аватара пользователя"
                  collection:
                    type: object
                    properties:
                      collection_id:
                        type: integer
                        description: "ID подборки"
                      name:
                        type: string
                        description: "Название подборки"
                      url:
                        type: string
                        description: "URL подборки"
                      description:
                        type: string
                        description: "Описание подборки"
                      tags:
                        type: array
                        items:
                          type: string
                          enum: ["forest", "park", "near_water"]
                        description: "Теги подборки"
                      rating:
                        type: number
                        format: float
                        description: "Средний рейтинг подборки"
                      created_at:
                        type: integer
                        description: "Дата создания подборки в формате Unix"
                      routes:
                        type: object
                        properties:
                          amount:
                            type: integer
                            description: "Количество маршрутов в подборке"
                          ids:
                            type: array
                            items:
                              type: integer
                            description: "Список id маршрутов в подборке"
                example:
                  user: 
                    user_id: 1
                    name: "Алла Майонезова"
                    image_url: "image"
                  collection: 
                    collection_id: 1 
                    name: "Best Mountain Trails" 
                    url: "url"
                    description: "adasasdassd"
                    tags: ["forest", "park"]
                    rating: 4.5
                    created_at: 1616179200
                    routes: 
                      amount: 2
                      ids: [1, 2]

  /api/collection/collection:
    post:
      summary: "Создание новой подборки"
      description: "Позволяет пользователю создать новую подборку."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                name:
                  type: string
                  description: "Название подборки"
                description:
                  type: string
                  description: "Описание подборки"
                tags:
                  type: array
                  items:
                    type: string
                    enum: ["forest", "park", "near_water"]
                  description: "Список тегов"
              example:
                user_id: 1
                name: "Favorite Trails"
                description: "Something about route"
                tags: ["forest", "park"]
      responses:
        201:
          description: "Подборка успешно создана"

    put:
      summary: "Обновление подборки"
      description: "Позволяет пользователю обновить существующую подборку. (Добавлять только измененные, то есть если name изменен, то его и добавлять в тело, а остальные - нет)"
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
        - in: header
          name: collection-id
          required: true
          schema:
            type: integer
          description: "ID подборки"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                name:
                  type: string
                  description: "Название подборки"
                description:
                  type: string
                  description: "Описание подборки"
                tags:
                  type: array
                  items:
                    type: string
                    enum: ["forest", "park", "near_water"]
                  description: "Список тегов"
              example:
                user_id: 1
                description: "A beautiful trail in the mountains" 
      responses:
        200:
          description: "Подборка успешно обновлена"

    delete:
      summary: "Удаление подборки"
      description: "Позволяет пользователю удалить существующую подборку."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
        - in: header
          name: collection-id
          required: true
          schema:
            type: integer
          description: "ID подборки"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                  example: 1

      responses:
        200:
          description: "Подборка успешно удалена"

  /api/collection/collection/{collection-id}/add/{route-id}:
    put:
      summary: "Добавление маршрута в подборку"
      description: "Позволяет пользователю добавить маршрут в указанную подборку."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
        - in: path
          name: collection-id
          required: true
          schema:
            type: integer
          description: "ID подборки"
        - in: path
          name: route-id
          required: true
          schema:
            type: integer
          description: "ID маршрута"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                  example: 1
      responses:
        200:
          description: "Маршрут успешно добавлен в подборку"

  /api/collection/collection/{collection-id}/remove/{route-id}:
    delete:
      summary: "Удаление маршрута из подборки"
      description: "Позволяет пользователю удалить маршрут из указанной подборки."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
        - in: path
          name: collection-id
          required: true
          schema:
            type: integer
          description: "ID подборки"
        - in: path
          name: route-id
          required: true
          schema:
            type: integer
          description: "ID маршрута"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                  example: 1
      responses:
        200:
          description: "Маршрут успешно удален из подборки"
  
  /api/media/image/upload:
    post:
      summary: "Загрузка изображения"
      description: "Позволяет загрузить изображение в MinIO. Возвращает JSON с уникальным именем изображения."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: "Файл изображения"
              required:
                - file
      responses:
        "200":
          description: "Изображение успешно загружено"
          content:
            application/json:
              schema:
                type: object
                properties:
                  image_url:
                    type: string
                    description: "Уникальное имя изображения (ключ), которое используется для получения изображения"
                    example: "ee8ae9b6-8d0f-42c5-8581-fa75df64fc07_2.jpg"
        "400":
          description: "Ошибка запроса – файл не предоставлен"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "No file provided"
        "500":
          description: "Внутренняя ошибка сервиса при загрузке изображения"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Upload failed"
                    
  /api/media/image/{image_name}:
    get:
      summary: "Получение изображения"
      description: "Позволяет получить изображение по его уникальному имени, загруженному в MinIO."
      parameters:
        - in: path
          name: image_name
          required: true
          schema:
            type: string
          description: "Уникальное имя изображения (ключ), возвращенное при загрузке"
      responses:
        "200":
          description: "Изображение успешно получено"
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            application/octet-stream:
              schema:
                type: string
                format: binary
        "404":
          description: "Изображение не найдено"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Image not found"
        "500":
          description: "Внутренняя ошибка сервиса при получении изображения"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to collect object body"
  
  /api/moderation/entity/report:
    post:
      summary: "Жалоба"
      description: "Отправка жалобы на объект, такой как пользователь, комментарий, рецензия, пост или маршрут"
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                object_type:
                  type: string
                  enum: ["user", "review", "route", "comment"]
                object_id:
                  type: integer
                reason:
                  type: string
                  enum: ["spam or advertising", "inappropriate content", "violation of community rules", "offensive content"]
                details:
                  type: string
              example:
                user_id: 1
                object_type: "route"
                object_id: 1
                reason: "inappropriate content"
                details: "This route contains inappropriate language."
      responses:
        200:
          description: "Жалоба успешно отправлена"

  /api/moderation/entity/reports:
    get:
      summary: "Получение списка всех жалоб для модерации"
      description: "Получение всех отправленных жалоб, которые нуждаются в модерации"
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
        - in: query
          name: pagination-page-number
          required: false
          schema:
            type: integer
            minimum: 1
          description: "Номер страницы для отображения (по умолчанию 1)"
          example: 1
        - in: query
          name: pagination-per-page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: "Количество элементов на странице (по умолчанию 10)"
          example: 10
        - in: query
          name: status
          required: true
          schema:
            type: string
            enum: ["opened", "closed"]
          description: "Статус репорта"
          example: "opened"
      responses:
        200:
          description: "Список жалоб"
          headers:
            pagination-current-page:
              description: "Текущая страница пагинации"
              schema:
                type: integer
                example: 1
            pagination-total-elements:
              description: "Общее количество страниц"
              schema:
                type: integer
                example: 5
            pagination-per-page:
              description: "Количество элементов на странице"
              schema:
                type: integer
                example: 3
            pagination-total-pages:
              description: "Количество страниц"
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  reports:
                    type: array
                    items:
                      type: object
                      properties:
                        report_id:
                          type: integer
                        user_id:
                          type: integer
                        object_type:
                          type: string
                          enum: ["user", "review", "route", "comment"]
                        object_id:
                          type: integer
                        reason:
                          type: string
                          enum: ["spam or advertising", "inappropriate content", "violation of community rules", "offensive content"]
                        details:
                          type: string
                        created_at:
                          type: integer
                          format: int64
                        closed_at:
                          type: integer
                          format: int64
                        status:
                          type: string
                          enum: ["opened", "closed"]
                example:
                  {
                    "reports": [
                      { 
                        "report_id": 1, 
                        "user_id": 1,
                        "object_type": "route", 
                        "object_id": 1, 
                        "reason": "inappropriate content", 
                        "details": "This route contains inappropriate language.", 
                        "status": "closed", 
                        "created_at": 1616179200,
                        "closed_at": 1616179200
                      }
                    ]
                  }

  /api/moderation/entity/report/resolve:
    post:
      summary: "Закрытие жалобы после рассмотрения"
      description: "Отметка жалобы как решённой после рассмотрения модератором"
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                report_id:
                  type: integer
                resolution:
                  type: string
              example:
                user_id: 1
                report_id: 1
                resolution: "The issue has been resolved, and the content has been edited."
      responses:
        200:
          description: "Жалоба успешно закрыта"

  /api/moderation/bug/report:
    post:
      summary: "Отправка отчёта об ошибке"
      description: "Отправка отчёта о найденной ошибке для её дальнейшего рассмотрения."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                description:
                  type: string
              example:
                user_id: 1
                description: "The app crashes when trying to upload a large file."
      responses:
        200:
          description: "Отчёт об ошибке успешно отправлен"

  /api/moderation/bug/reports:
    get:
      summary: "Получение списка баг-репортов"
      description: "Получение всех отправленных отчётов об ошибках для модераторов или разработчиков."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
        - in: query
          name: pagination-page-number
          required: false
          schema:
            type: integer
            minimum: 1
          description: "Номер страницы для отображения (по умолчанию 1)"
          example: 1
        - in: query
          name: pagination-per-page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: "Количество элементов на странице (по умолчанию 10)"
          example: 10
      responses:
        200:
          description: "Список баг-репортов"
          headers:
            pagination-current-page:
              description: "Текущая страница пагинации"
              schema:
                type: integer
                example: 1
            pagination-total-elements:
              description: "Общее количество страниц"
              schema:
                type: integer
                example: 5
            pagination-per-page:
              description: "Количество элементов на странице"
              schema:
                type: integer
                example: 3
            pagination-total-pages:
              description: "Количество страниц"
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  bug_reports:
                    type: array
                    items:
                      type: object
                      properties:
                        report_id:
                          type: integer
                        user_id:
                          type: integer
                        description:
                          type: string
                        status:
                          type: string
                          enum: ["opened", "closed"]
                        created_at:
                          type: integer
                        closed_at:
                          type: integer
                      example:
                        report_id: 1
                        user_id: 1
                        description: "The app crashes when trying to upload a large file."
                        status: "opened"
                        created_at: 1616179200
                        closed_at: 1616179200

  /api/moderation/bug/report/resolve:
    post:
      summary: "Закрытие баг-репорта"
      description: "Отметка баг-репорта как решённого после исправления."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                report_id:
                  type: string
                resolution:
                  type: string
              example:
                user_id: 1
                report_id: 1
                resolution: "Fixed the file upload issue by optimizing memory handling."
      responses:
        200:
          description: "Баг-репорт успешно закрыт"

  /api/moderation/routes:
    get:
      summary: "Получение списка маршрутов, ожидающих модерации"
      description: "Получение маршрутов, которые требуют одобрения перед публикацией."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
        - in: query
          name: pagination-page-number
          required: false
          schema:
            type: integer
            minimum: 1
          description: "Номер страницы для отображения (по умолчанию 1)"
          example: 1
        - in: query
          name: pagination-per-page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: "Количество элементов на странице (по умолчанию 10)"
          example: 10
        - in: query
          name: status
          required: true
          schema:
            type: string
            enum: ["pending", "approved", "rejected"]
          description: "Статус репорта"
          example: "approved"
      responses:
        200:
          description: "Список маршрутов, ожидающих модерации"
          headers:
            pagination-current-page:
              description: "Текущая страница пагинации"
              schema:
                type: integer
                example: 1
            pagination-total-elements:
              description: "Общее количество страниц"
              schema:
                type: integer
                example: 5
            pagination-per-page:
              description: "Количество элементов на странице"
              schema:
                type: integer
                example: 3
            pagination-total-pages:
              description: "Количество страниц"
              schema:
                type: integer
                example: 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  routes:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: object
                          properties:
                            user_id:
                              type: integer
                              description: "ID юзера"
                              example: 1
                            name:
                              type: string
                              description: "ID юзера"
                              example: "Алла Иванова"
                            image_url:
                              type: string
                              description: "url аватарки"
                              example: "url"
                        route:
                          type: object
                          properties:
                            route_id:
                              type: integer
                              description: "ID маршрута"
                              example: 123
                            name:
                              type: string
                              description: "Название маршрута"
                              example: "Mountain Trail"
                            url:
                              type: string
                              description: "URL маршрута"
                              example: "url"
                            description:
                              type: string
                              description: "Описание маршрута"
                              example: "A beautiful trail in the mountains"
                            length:
                              type: integer
                              description: "Длина маршрута в метрах"
                              example: 5000
                            duration:
                              type: integer
                              description: "Продолжительность маршрута в секундах"
                              example: 7200
                            tags:
                              type: array
                              items:
                                type: string
                                enum: ["forest", "park", "near_water"]
                              description: "Теги маршрута"
                              example: ["forest", "near_water"]
                            category:
                              type: string
                              enum: ["walking"]
                              description: "Категория маршрута"
                              example: "walking"
                            created_at:
                              type: integer
                              description: "Дата создания маршрута в формате Unix"
                              example: 1616179200
                            status:
                              type: string
                              enum: ["pending", "approved", "rejected"]
                              description: "Статус маршрута"
                              example: "approved"
                            is_deleted:
                              type: boolean
                              description: "Флаг удаления маршрута"
                              example: false
                            rating:
                              type: number
                              format: float
                              description: "Средний рейтинг маршрута"
                              example: 3.5
                            images:
                              type: array
                              items:
                                type: string
                              description: "Ссылки на изображения маршрута"
                              example: ["url_to_image1", "url_to_image2"]
                        points:
                          type: array
                          description: "Точки маршрута с координатами и дополнительной информацией"
                          items:
                            type: object
                            properties:
                              point_id:
                                type: integer
                                description: "ID точки маршрута"
                                example: 1
                              coordinate:
                                type: object
                                properties:
                                  latitude:
                                    type: number
                                    format: float
                                    description: "Широта"
                                    example: 45.12345
                                  longitude:
                                    type: number
                                    format: float
                                    description: "Долгота"
                                    example: 12.12345
                              time_offset:
                                type: integer
                                description: "Время в секундах с начала маршрута"
                                example: 300
                              elevation:
                                type: integer
                                description: "Высота точки над уровнем моря в метрах"
                                example: 200
                              speed:
                                type: number
                                format: float
                                description: "Скорость на этой точке маршрута"
                                example: 2.5
                              point_description:
                                type: string
                                description: "Описание точки маршрута"
                                example: "Поворот у дерева"
                              images:
                                type: array
                                items:
                                  type: string
                                description: "Изображения, связанные с точкой маршрута"
                                example: ["url_to_image1", "url_to_image2"]
                      example:
                        user:
                          user_id: 1
                          name: "Алла Майонезова"
                          image_url: "image"
                        route:
                          route_id: 123
                          name: "Mountain Trail"
                          url: "url"
                          description: "A beautiful trail in the mountains"
                          length: 5000
                          duration: 7200
                          tags: ["forest", "near_water"]
                          category: "walking"
                          created_at: 1616179200
                          rating: 3.5
                          images: ["url_to_image1", "url_to_image2"]
                        points:
                          - point_id: 1
                            coordinate:
                              latitude: 45.12345
                              longitude: 12.12345
                            time_offset: 300
                            elevation: 200
                            speed: 2.5
                            point_description: "Поворот у дерева"
                            images: ["url_to_image1", "url_to_image2"]

  /api/moderation/route/approve:
    post:
      summary: "Одобрение маршрута"
      description: "Позволяет модератору одобрить маршрут."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                object_type:
                  type: string
                  enum: ["route", "post", "comment", "collection"]
                object_id:
                  type: integer
              example:
                user_id: 1
                object_type: "route"
                object_id: 1
      responses:
        200:
          description: "Маршрут успешно одобрен"

  /api/moderation/route/reject:
    post:
      summary: "Отклонение маршрута"
      description: "Позволяет модератору отклонить маршрут."
      parameters:
        - in: header
          name: session-token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя"
                object_type:
                  type: string
                  enum: ["route", "post", "comment", "collection"]
                object_id:
                  type: integer
                reason:
                  type: string
              example:
                user_id: 1
                object_type: "route"
                object_id: 1
                reason: "The route description is incomplete."
      responses:
        200:
          description: "Маршрут отклонён"

  /api/search/users:
    get:
      summary: "Поиск пользователей"
      description: "Поиск пользователей по имени, фамилии, username и пагинации."
      parameters:
        - name: q
          in: query
          description: "Строка поиска (имя, фамилия, username)"
          required: false
          schema:
            type: string
        - name: pagination-page-number
          in: query
          description: "Номер страницы (>=1)"
          required: false
          schema:
            type: integer
        - name: pagination-per-page
          in: query
          description: "Количество элементов на странице (1..100)"
          required: false
          schema:
            type: integer
        - name: extra
          in: query
          description: "Дополнительные неиспользуемые параметры"
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Список найденных пользователей (id) с заголовками пагинации."
          headers:
            pagination-current-page:
              schema:
                type: integer
            pagination-total-elements:
              schema:
                type: integer
            pagination-per-page:
              schema:
                type: integer
            pagination-total-pages:
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: integer
        "400":
          description: "Некорректные параметры (ошибка десериализации)."
        "500":
          description: "Внутренняя ошибка сервера."

  /api/search/routes:
    get:
      summary: "Поиск маршрутов"
      description: "Поиск маршрутов по названию, фильтрам (длина, длительность, рейтинг, теги, категория), пагинации, а также сортировка и поиск по геолокации."
      parameters:
        - name: q
          in: query
          description: "Строка поиска (название маршрута)"
          schema:
            type: string
        - name: min_length
          in: query
          description: "Минимальная длина маршрута (м)"
          schema:
            type: integer
        - name: max_length
          in: query
          description: "Максимальная длина маршрута (м)"
          schema:
            type: integer
        - name: min_duration
          in: query
          description: "Минимальная длительность (секунды)"
          schema:
            type: integer
        - name: max_duration
          in: query
          description: "Максимальная длительность (секунды)"
          schema:
            type: integer
        - name: tags
          in: query
          description: "Теги, разделённые запятой (например, forest,near_water)."
          schema:
            type: string
        - name: category
          in: query
          description: "Категория маршрута (например, walking)."
          schema:
            type: string
        - name: min_rating
          in: query
          description: "Минимальный рейтинг (0..5)"
          schema:
            type: number
            format: float
        - name: max_rating
          in: query
          description: "Максимальный рейтинг (0..5)"
          schema:
            type: number
            format: float
        - name: pagination-page-number
          in: query
          description: "Номер страницы (>=1)"
          schema:
            type: integer
        - name: pagination-per-page
          in: query
          description: "Количество элементов на странице (1..100)"
          schema:
            type: integer
        - name: order
          in: query
          description: "Тип сортировки: rating_desc, rating_asc, created_desc, created_asc, distance, between."
          schema:
            type: string
        - name: lat
          in: query
          description: "Широта для сортировки по distance"
          schema:
            type: number
            format: float
        - name: lon
          in: query
          description: "Долгота для сортировки по distance"
          schema:
            type: number
            format: float
        - name: start_lat
          in: query
          description: "Широта начальной точки для order=between"
          schema:
            type: number
            format: float
        - name: start_lon
          in: query
          description: "Долгота начальной точки для order=between"
          schema:
            type: number
            format: float
        - name: end_lat
          in: query
          description: "Широта конечной точки для order=between"
          schema:
            type: number
            format: float
        - name: end_lon
          in: query
          description: "Долгота конечной точки для order=between"
          schema:
            type: number
            format: float
      responses:
        "200":
          description: "Список найденных маршрутов (id) с заголовками пагинации."
          headers:
            pagination-current-page:
              schema:
                type: integer
            pagination-total-elements:
              schema:
                type: integer
            pagination-per-page:
              schema:
                type: integer
            pagination-total-pages:
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: integer
        "400":
          description: "Некорректные параметры (ошибка десериализации). Например, неправильные координаты или рейтинги."
        "500":
          description: "Внутренняя ошибка сервера."

  /api/search/collections:
    get:
      summary: "Поиск подборок"
      description: "Поиск подборок по названию, рейтингу, тегам, пагинации и сортировке."
      parameters:
        - name: q
          in: query
          description: "Поисковая строка (название подборки)."
          schema:
            type: string
        - name: min_rating
          in: query
          description: "Минимальный рейтинг (0..5)"
          schema:
            type: number
            format: float
        - name: max_rating
          in: query
          description: "Максимальный рейтинг (0..5)"
          schema:
            type: number
            format: float
        - name: tags
          in: query
          description: "Теги, разделённые запятой (например, park,forest)."
          schema:
            type: string
        - name: pagination-page-number
          in: query
          description: "Номер страницы (>=1)"
          schema:
            type: integer
        - name: pagination-per-page
          in: query
          description: "Количество элементов на странице (1..100)"
          schema:
            type: integer
        - name: order
          in: query
          description: "Тип сортировки: rating_desc, rating_asc, created_desc, created_asc."
          schema:
            type: string
      responses:
        "200":
          description: "Список найденных подборок (id) с заголовками пагинации."
          headers:
            pagination-current-page:
              schema:
                type: integer
            pagination-total-elements:
              schema:
                type: integer
            pagination-per-page:
              schema:
                type: integer
            pagination-total-pages:
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: integer
        "400":
          description: "Некорректные параметры (ошибка десериализации). Например, неправильный формат рейтинга."
        "500":
          description: "Внутренняя ошибка сервера."

  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '409':
          description: User may already exist
        '500':
          description: Internal server error

  /api/auth/login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/auth/check_token:
    post:
      summary: Check if the token is valid
      security:
        - SessionAuth: []  # 🔹 Используем аутентификацию через cookie
      parameters:
        - name: session_token
          in: cookie  # 🔹 Передаем токен через cookie
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckTokenRequest'
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
        '400':
          description: Invalid session_token
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/auth/vk:
    post:
      summary: Log in a user via VK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VkAuthParams'
      responses:
        '200':
          description: User logged in via VK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /api/like/comment/{comment-id}:
    post:
      summary: "Поставить лайк на комментарий"
      description: "Позволяет пользователю поставить лайк на комментарий."
      parameters:
        - in: path
          name: comment-id
          required: true
          schema:
            type: integer
          description: "ID комментария"
        - in: header
          name: session_token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя, ставящего лайк"
                  example: 1
      responses:
        200:
          description: "Лайк успешно поставлен"
        400:
          description: "Некорректный запрос"
        401:
          description: "Пользователь не авторизован (неправильный session_token)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        500:
          description: "Внутренняя ошибка сервиса"
    delete:
      summary: "Убрать лайк с комментария"
      description: "Позволяет пользователю убрать поставленный лайк с комментария."
      parameters:
        - in: path
          name: comment-id
          required: true
          schema:
            type: integer
          description: "ID комментария"
        - in: header
          name: session_token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя, убирающего лайк"
                  example: 1
      responses:
        200:
          description: "Лайк успешно убран"
        400:
          description: "Некорректный запрос"
        401:
          description: "Пользователь не авторизован (неправильный session_token)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        500:
          description: "Внутренняя ошибка сервиса"

  /api/like/review/{review-id}:
    post:
      summary: "Поставить лайк на рецензию"
      description: "Позволяет пользователю поставить лайк на рецензию."
      parameters:
        - in: path
          name: review-id
          required: true
          schema:
            type: integer
          description: "ID рецензии"
        - in: header
          name: session_token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя, ставящего лайк"
                  example: 1
      responses:
        200:
          description: "Лайк успешно поставлен"
        400:
          description: "Некорректный запрос"
        401:
          description: "Пользователь не авторизован (неправильный session_token)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        500:
          description: "Внутренняя ошибка сервиса"
    delete:
      summary: "Убрать лайк с рецензии"
      description: "Позволяет пользователю убрать поставленный лайк с рецензии."
      parameters:
        - in: path
          name: review-id
          required: true
          schema:
            type: integer
          description: "ID рецензии"
        - in: header
          name: session_token
          required: true
          schema:
            type: string
          description: "Токен сессии"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: "ID пользователя, убирающего лайк"
                  example: 1
      responses:
        200:
          description: "Лайк успешно убран"
        400:
          description: "Некорректный запрос"
        401:
          description: "Пользователь не авторизован (неправильный session_token)"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        500:
          description: "Внутренняя ошибка сервиса"

  /api/user/{username}:
    get:
      summary: Получить публичный профиль пользователя по username.
      parameters:
        - name: username
          in: path
          description: Имя пользователя.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ. Возвращает публичный профиль пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUserProfileResponse'
        '404':
          description: Пользователь не найден.
        '500':
          description: Внутренняя ошибка сервера.
  # /api/user/delete:
  #   delete:
  #     summary: Удалить профиль пользователя.
  #     requestBody:
  #       description: Данные для удаления профиля.
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/DeleteUserProfileRequest'
  #     responses:
  #       '200':
  #         description: Профиль пользователя успешно удалён.
  #       '404':
  #         description: Пользователь не найден.
  #       '500':
  #         description: Внутренняя ошибка сервера.
  # /api/user/settings:
  #   get:
  #     summary: Получить настройки пользователя.
  #     parameters:
  #       - name: user_id
  #         in: query
  #         description: Идентификатор пользователя.
  #         required: true
  #         schema:
  #           type: integer
  #     responses:
  #       '200':
  #         description: Успешный ответ. Возвращает настройки пользователя.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/UserSettings'
  #       '404':
  #         description: Настройки пользователя не найдены.
  #       '500':
  #         description: Внутренняя ошибка сервера.
    # put:
    #   summary: Обновить настройки пользователя.
    #   requestBody:
    #     description: Объект с данными для обновления настроек.
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           $ref: '#/components/schemas/UserSettingsUpdate'
    #   responses:
    #     '200':
    #       description: Настройки пользователя успешно обновлены.
    #     '500':
    #       description: Внутренняя ошибка сервера.
        
components:
  schemas:
    PublicUserProfileResponse:
      type: object
      properties:
        user_id:
          type: integer
        username:
          type: string
        name:
          type: string
        surname:
          type: string
          nullable: true
        country:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true
        bio:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        instagram:
          type: string
          nullable: true
        facebook:
          type: string
          nullable: true
        x:
          type: string
          nullable: true
        vkontakte:
          type: string
          nullable: true
        telegram:
          type: string
          nullable: true
        youtube:
          type: string
          nullable: true
        user_site:
          type: string
          nullable: true
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        collections:
          type: array
          items:
            $ref: '#/components/schemas/Collection'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        completed_routes:
          type: array
          items:
            $ref: '#/components/schemas/CompletedRoute'
    Route:
      type: object
      properties:
        route_id:
          type: integer
        name:
          type: string
        url:
          type: string
        description:
          type: string
          nullable: true
        length:
          type: integer
        duration:
          type: integer
        tags:
          type: array
          items:
            type: string
          nullable: true
        category:
          type: string
        created_at:
          type: string
          format: date-time
        status:
          type: string
        rating:
          type: number
          format: float
        images:
          type: array
          items:
            type: string
          nullable: true
    Collection:
      type: object
      properties:
        collection_id:
          type: integer
        name:
          type: string
        rating:
          type: number
          format: float
          nullable: true
        url:
          type: string
        description:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        created_at:
          type: string
          format: date-time
    Review:
      type: object
      properties:
        review_id:
          type: integer
        route_id:
          type: integer
        rating:
          type: number
          format: float
          nullable: true
        comment:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        images:
          type: array
          items:
            type: string
          nullable: true
    CompletedRoute:
      type: object
      properties:
        route_id:
          type: integer
        completed_at:
          type: string
          format: date-time
    DeleteUserProfileRequest:
      type: object
      properties:
        username:
          type: string
      required:
        - username
    # UserSettings:
    #   type: object
    #   properties:
    #     show_phone:
    #       type: boolean
    #     show_planned:
    #       type: boolean
    #     show_visited:
    #       type: boolean
    #   required:
    #     - show_phone
    #     - show_planned
    #     - show_visited
    # UserSettingsUpdate:
    #   type: object
    #   properties:
    #     show_phone:
    #       type: boolean
    #     show_planned:
    #       type: boolean
    #     show_visited:
    #       type: boolean
    #   required:
    #     - user_id








    RegisterRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        name:
          type: string

    RegisterResponse:
      type: object
      properties:
        user_id:
          type: integer
        token:
          type: string

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string
    
    CheckTokenRequest:
      type: object
      properties:
        user_id: 
          type: integer

    VkAuthParams:
      type: object
      properties:
        code:
          type: string

    VkTokenResponse:
      type: object
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        user_id:
          type: integer
        email:
          type: string
          nullable: true

  securitySchemes:
    SessionAuth:
      type: apiKey
      in: cookie
      name: session_token